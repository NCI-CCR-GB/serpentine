


"""
rulues for generating QC metrics and summarizing QC metrics
"""

rule qcSum:
    input: expand("{metricsBase}.{metricsType}", metricsBase=metricsBases, metricsType=['summetrics','quality_distribution_metrics','hsmetrics'])
    output: METRICS_summaries
    params: 
        batch=" -l  nodes=1:gpfs",
        metricsPatterns=lambda wc: ','.join(metricsBases),
        outDir="STUDY/" + config['reference'] + "." + config['aligner'] + "/qc"
    shell: "echo {params.outDir}; do_qcSummaryFiles.R -I {params.metricsPatterns} -O {params.outDir} -T dupmetrics,summetrics,hsmetrics,qscoremetrics"




# rule fastqcSum:
#     """
#     summarize fastqc at different levels for comparizon purpose
#     """
#     input:
#         FASTQS
#     output:
#         "STUDY/summary.fastqc.txt"
#     params:
#         batch = '-l nodes=1:gpfs'
#     version: ""
#     log: "STUDY/summary.fastqc.log"
#     threads: 8
#     shell:
# """
# ...
# """

# rule fastqc:
#     """
#     fastqc data files will be saved to the same dir as the fastq files
#     """
#     input:
#         "{prefix}.fastq.gz"
#     output:
#         "{prefix}_fastqc.zip"
#     params:
#         batch = '-l nodes=1:gpfs -q ccr'
#     version: "0.11.2"
#     log: "{prefix}_fastqc.log"
#     threads: 8
#     shell: """
# module load fastqc/{version}
# fastqc {input} > {log} 2>&1
# """

# rule bamDepth:
#     input:
#         bam="{base}/bam/{sample}.final.bam",
#         bai="{base}/bam/{sample}.final.bam.bai"
#     output:
#         "{base}/qc/{sample}.final.bam.depth"
#     params:
#         batch="-l nodes=1:gpfs ",
#         targets_interval_list = lambda wildcards: config['genomic_intervals'][wildcards.sample],
#         outDir = "{base}/qc"
#     version: "2.19.0"
#     shell: """
# module load bedtools/{version}
# /home/bin/bamDepth.sh {input.bam} {params.targets_interval_list} {params.outDir} "
# """


rule fastqc:
    """
    fastqc data files will be saved to the same dir as the fastq files
    """
    input: lambda wildcards: fqc2fq[wildcards.base]
    output: "STUDY/fastqc/{base}_fastqc.zip"
    params: 
        batch = '-l nodes=1:gpfs -q ccr'
    version: "0.11.2"
    log: "STUDY/fastqc/log/{base}_fastqc.log"
    threads: 32
    shell: """
module load fastqc/{version}
fastqc -t {threads} -o STUDY/fastqc {input} > {log} 2>&1
"""

rule multiMetrics:
    input: 
        bam="{base}/bam/{sample}.final.bam",
        bai="{base}/bam/{sample}.final.bam.bai",
        reference = config['references'][config['reference']]
    output:
        "{base}/qc/{sample}.final.bam.summetrics",
        "{base}/qc/{sample}.final.bam.insert_size_metrics",
        "{base}/qc/{sample}.final.bam.quality_distribution_metrics",
        "{base}/qc/{sample}.final.bam.quality_by_cycle_metrics"
    params: 
        batch="-l nodes=1:gpfs -q ccr",
        outputBase="{base}/qc/{sample}.final.bam",
        aligner=config['aligner'],
        reference=config['reference']
    version: "1.119"
    run:
        shell("""
module load picard/{version}
java -jar ${{PICARDJARPATH}}/CollectMultipleMetrics.jar \
REFERENCE_SEQUENCE={input.reference} \
VALIDATION_STRINGENCY=SILENT \
INPUT={input.bam} \
OUTPUT={params.outputBase} \
PROGRAM=CollectAlignmentSummaryMetrics \
PROGRAM=CollectInsertSizeMetrics \
PROGRAM=QualityScoreDistribution \
PROGRAM=MeanQualityByCycle \
PROGRAM=CollectBaseDistributionByCycle

if [ -f {params.outputBase}.alignment_summary_metrics ];then
    mv {params.outputBase}.alignment_summary_metrics {output[0]}
fi
# ln -fs ../../{output[0]} STUDY/{params.reference}.{params.aligner}/qc/{wildcards.sample}.final.bam.summetrics
""")

rule flagstat:
    input: 
        bam="{base}/bam/{sample}.final.bam",
        bai="{base}/bam/{sample}.final.bam.bai"
    output:
        "{base}/qc/{sample}.final.bam.flagstat"
    params:
        batch="-l nodes=1:gpfs "
    version: "0.1.19"
    shell: """
module load samtools/{version}
samtools flagstat {input[0]} > {output}
"""

rule readDepth:
    input: 
        bam="{base}/bam/{sample}.final.bam",
        bai="{base}/bam/{sample}.final.bam.bai"
    output:
        "{base}/qc/{sample}.final.bam.depth"
    params:
        batch="-l nodes=1:gpfs ",
        outDir="{base}/qc",
        genomic_intervals=lambda wildcards: config['genomic_intervals'][wildcards.sample].replace('.merged', '')
    threads: 32
    version: "2.19.0"
    shell: """
module load bedtools/{version}
/home/zhujack/bin/readDepth.sh {input.bam} {params.genomic_intervals} {params.outDir}
"""


rule bamqc:
    input: 
        bam="{base}/bam/{sample}.final.bam",
        bai="{base}/bam/{sample}.final.bam.bai"
    output:
        "{base}/qc/{sample}.final.bam.qualimapReport.pdf"
    params:
        batch="-l nodes=1:gpfs ",
        outDir="{base}/qc",
        gff=lambda wildcards: config['genomic_intervals'][wildcards.sample].replace('.bed', '.gff')
    threads: 32
    version: "v2.0"
    shell: """
module load qualimap/{version}
qualimap bamqc -c -bam {input.bam} -outdir {params.outDir} -outfile {output} -gff {params.gff} -nt {threads} --java-mem-size=60G
"""


rule targetIntervals:
    input: 
        bam="{base}/bam/{sample}.final.bam",
        bai="{base}/bam/{sample}.final.bam.bai",
        reference = config['references'][config['reference']]
    output:
        temp("{base}/qc/{sample}.final.bam.intervals")
    params:
        batch="-l nodes=1:gpfs ",
        targets_interval_list = lambda wildcards: config['genomic_intervals'][wildcards.sample]
    version: "0.1.19"
    shell: """
module load samtools/{version}
cat <(samtools view -H {input.bam}) <(gawk '{{print $1 "\t" $2+1 "\t" $3 "\t+\tinterval_" NR}}' {params.targets_interval_list} )> {output}
"""


rule hsMetrics:
    input:
        bam="{base}/bam/{sample}.final.bam",
        interval="{base}/qc/{sample}.final.bam.intervals",
        reference = config['references'][config['reference']]
    output:
        "{base}/qc/{sample}.final.bam.hsmetrics"
    params: 
        batch="-l nodes=1:gpfs ",
        ref_name = config['reference'],
        aligner=config['aligner']
    version: "1.119"
    shell: """
module load picard/{version}
java -Xmx16g -jar ${{PICARDJARPATH}}/CalculateHsMetrics.jar \
BAIT_INTERVALS={input.interval} \
TARGET_INTERVALS={input.interval} \
INPUT={input.bam} \
OUTPUT={output} \
METRIC_ACCUMULATION_LEVEL=ALL_READS \
REFERENCE_SEQUENCE={input.reference} \
QUIET=true  \
VALIDATION_STRINGENCY=SILENT

"""
#ln -fs {output} STUDY/{params.ref_name}.{params.aligner}/qc/{wildcards.sample}.final.bam.hsmmetrics

