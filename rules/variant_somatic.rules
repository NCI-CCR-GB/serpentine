## somatic variants
rule MuTect:
    input: 
        lambda wildcards: somaticPairs[wildcards.somaticPair],
        reference = config['references'][config['reference']]
    output: 
        call_stats="{anything}/mutect/{somaticPair}.mutect.call_stats.txt", 
        coverage="{anything}/mutect/{somaticPair}.mutect.coverage.wig.txt",
        vcf="{anything}/mutect/{somaticPair}.mutect.raw.vcf"
    params: 
        batch="-l nodes=1:gpfs -q ccr",
        dbsnp=config["resources"]["dbsnp"],
        cosmic=config["resources"]["cosmic"]
    version: "1.1.4"
    threads: 32
    shell: """
module load muTect/{version}
muTect \
--memory 58g \
--analysis_type MuTect \
--reference_sequence {input.reference} \
--cosmic {params.cosmic} \
--dbsnp {params.dbsnp} \
--input_file:normal {input[0]} \
--input_file:tumor {input[2]} \
--out {output.call_stats} \
--coverage_file {output.coverage} \
--vcf  {output.vcf}
"""


rule VarScan:
    input: 
        lambda wildcards: somaticPairs[wildcards.somaticPair],
        reference = config['references'][config['reference']]
    output: 
        snvs="{anything}/varscan/{somaticPair}.varscan.snvs.raw.vcf",
        indels="{anything}/varscan/{somaticPair}.varscan.indels.raw.vcf"
    params: 
        batch="-l nodes=1:gpfs -q ccr",
        outBase="{anything}/varscan/{somaticPair}.varscan"
    version: "2.3.6"
    threads: 32
    shell: """
module load samtools/0.1.19
java -Xmx58g -jar \
/usr/local/apps/varscan/current/VarScan.v{version}.jar somatic \
<( samtools mpileup -q 2 -f {input.reference} {input[0]} ) \
<( samtools mpileup -q 2 -f {input.reference} {input[2]} ) \
{params.outBase} --output-vcf -min-var-freq 0.05

if [ -f {params.outBase}.snp.vcf ]; then
    mv {params.outBase}.snp.vcf {output.snvs}
fi
if [ -f {params.outBase}.indel.vcf ]; then
    mv {params.outBase}.indel.vcf {output.indels}
fi
"""

# java -Xmx58g -jar \
# /usr/local/apps/varscan/current/VarScan.v{version}.jar somatic \
# <( samtools mpileup -C50 -BQ0 -d 1000000 -A -f {input.reference} {input[0]} ) \
# <( samtools mpileup -C50 -d 1000000 -A -f {input.reference} {input[2]} ) \
# {params.outBase} --output-vcf -min-var-freq 0.05


rule strelka:
    input: 
        lambda wildcards: somaticPairs[wildcards.somaticPair],
        reference = config['references'][config['reference']]
    output: "{anything}/strelka/{somaticPair}.strelka.snvs.raw.vcf", "{anything}/strelka/{somaticPair}.strelka.indels.raw.vcf"
    params: batch="-l nodes=1:gpfs -q ccr"
    version: "1.0.14"
    threads: 32
    shell: """
module load strelka/{version}

clearscratch
configureStrelkaWorkflow.pl \
--normal={input[0]} \
--tumor={input[2]} \
--ref={input.reference} \
--config=/data/CCRBioinfo/zhujack/snake/config.ini \
--output-dir=/scratch/strelka
make -j {threads} -f /scratch/strelka/Makefile
module load vcftools
cp /scratch/strelka/results/all.somatic.indels.vcf {output[1]}
cp /scratch/strelka/results/all.somatic.snvs.vcf {output[0]}
clearscratch
"""

