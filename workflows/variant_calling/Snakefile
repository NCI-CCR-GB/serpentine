import itertools
import os
import collections
from snakemake.exceptions import MissingInputException

# Environment variable for serpentine base directory location
SERPENTINE_HOME=['path2serpentine_clinomics']

try:
    SERPENTINE_HOME=os.environ['SERPENTINE_HOME']
except KeyError:
    pass

def _get_rule_path(rule_file_path):
    "Combines the serpentine base directory with serpentine rule paths"
    return(os.path.join(SERPENTINE_HOME,rule_file_path))

def _get_fastq_without_suffix():
    retval = [x.replace('.fastq.gz','') for x in 
              itertools.chain.from_iterable(config['units'].values())]
    return(retval)

configfile: "config.json"

## dic for entity conversion
UNIT_TO_LIBRARY = {}
for lib,units in config['libraries'].items():
    for unit in units:
        UNIT_TO_LIBRARY[unit]=lib

LIBRARY_TO_SAMPLE  = {}
for sample,libs in config['samples'].items():
    for lib in libs:
        LIBRARY_TO_SAMPLE[lib]=sample

SAMPLE_TO_SUBJECT  = {}
for subject,samples in config['subjects'].items():
    for sample in samples:
        SAMPLE_TO_SUBJECT[sample]=subject

SUBJECT_TO_STUDY  = {}
for study,subjects in config['studies'].items():
    for subject in subjects:
        SUBJECT_TO_STUDY[subject]=study

UNIT_TO_SAMPLE = {}
for unit in config['units'].keys():
    UNIT_TO_SAMPLE[unit]=LIBRARY_TO_SAMPLE[UNIT_TO_LIBRARY[unit]]

UNIT_TO_SUBJECT = {}
for unit in config['units'].keys():
    UNIT_TO_SUBJECT[unit]=SAMPLE_TO_SUBJECT[LIBRARY_TO_SAMPLE[UNIT_TO_LIBRARY[unit]]]

UNIT_TO_STUDY = {}
for unit in config['units'].keys():
    UNIT_TO_STUDY[unit]=SUBJECT_TO_STUDY[SAMPLE_TO_SUBJECT[LIBRARY_TO_SAMPLE[UNIT_TO_LIBRARY[unit]]]]

SAMPLE_TO_UNIT = collections.defaultdict(list)
for unit,sample in UNIT_TO_SAMPLE.items():
    SAMPLE_TO_UNIT[sample].append(unit)

SUBJECT_TO_UNIT = collections.defaultdict(list)
for unit,subject in UNIT_TO_SUBJECT.items():
    SUBJECT_TO_UNIT[subject].append(unit)

STUDY_TO_UNIT = collections.defaultdict(list)
for unit,study in UNIT_TO_STUDY.items():
    STUDY_TO_UNIT[study].append(unit)


## bam files
BAMS = ["SUBJECT/{subject}/{sample}/{reference}.{aligner}/bam/{sample}.final.bam".format(subject=SAMPLE_TO_SUBJECT[s], sample=s, reference=config['reference'], aligner=config['aligner']) for s in config['samples'].keys() ]
BAIS = [BAM + ".bai" for BAM in BAMS]
BAMS_all = [(BAM + ' ' + BAM + ".tdf " + BAM + ".bai").split(' ') for BAM in BAMS]

## metrics
# DUPMETRICS = [BAM + ".dupmetrics" for BAM in BAMS]
metricsBase = ["SUBJECT/{subject}/{sample}/{reference}.{aligner}/qc/{sample}.final.bam".format(subject=SAMPLE_TO_SUBJECT[s], sample=s, reference=config['reference'], aligner=config['aligner']) for s in config['samples'].keys() ]
METRICS_all = [ (BAM + ".summetrics " + BAM + ".insert_size_metrics " + BAM + ".quality_distribution_metrics " + BAM + ".quality_by_cycle_metrics").split(' ') for BAM in metricsBase]
FASTQC = expand("{unit}_fastqc.zip", unit = _get_fastq_without_suffix())

## variants
VARIANTS = []
for caller in config['germlineCallers']:
    VARIANTS += ["SUBJECT/{subject}/{sample}/{reference}.{aligner}/{caller}/{sample}.{caller}.vcf.gz".format(subject=SAMPLE_TO_SUBJECT[s], caller=caller, sample=s, reference=config['reference'],  aligner=config['aligner']) for s in config['samples'].keys() ]

## variant study
VARIANTS_freebayesM = "STUDY/variant/" + config['reference'] + "." + config['aligner'] + "/freebayes_all.vcf.gz"
VARIANTS_unifieldgenotyperM = "STUDY/variant/" + config['reference'] + "." + config['aligner'] + "/unifieldgenotyper_all.vcf.gz"

## strelka
VARIANTS_somatic = []
somaticPairs = {}
for pairedS in config['sample_references']:
    for pairedRef in config['sample_references'][pairedS]:
        pairedS_bam = "SUBJECT/{subject}/{sample}/{reference}.{aligner}/bam/{sample}.final.bam".format(subject=SAMPLE_TO_SUBJECT[pairedS], sample=pairedS, reference=config['reference'], aligner=config['aligner'])
        pairedRef_bam = "SUBJECT/{subject}/{sample}/{reference}.{aligner}/bam/{sample}.final.bam".format(subject=SAMPLE_TO_SUBJECT[pairedRef], sample=pairedRef, reference=config['reference'], aligner=config['aligner'])
        somaticPairs_bams = [pairedS_bam, pairedS_bam + ".bai", pairedRef_bam, pairedRef_bam + ".bai"]          
        somaticPairs[pairedS + "_vs_" + pairedRef] = somaticPairs_bams
        if 'strelka' in config['somaticCallers']:
            VARIANTS_somatic += ["SUBJECT/{subject}/{sample}/{reference}.{aligner}/strelka/{sample}_vs_{ref_sample}.strelka.snvs.vcf.gz".format(subject=SAMPLE_TO_SUBJECT[pairedS], sample=pairedS, reference=config['reference'], aligner=config['aligner'], ref_sample=pairedRef)]
            VARIANTS_somatic += ["SUBJECT/{subject}/{sample}/{reference}.{aligner}/strelka/{sample}_vs_{ref_sample}.strelka.indels.vcf.gz".format(subject=SAMPLE_TO_SUBJECT[pairedS], sample=pairedS, reference=config['reference'], aligner=config['aligner'], ref_sample=pairedRef)]
        if 'mutect' in config['somaticCallers']:
            VARIANTS_somatic += ["SUBJECT/{subject}/{sample}/{reference}.{aligner}/mutect/{sample}_vs_{ref_sample}.mutect.call_stats.txt".format(subject=SAMPLE_TO_SUBJECT[pairedS], sample=pairedS, reference=config['reference'], aligner=config['aligner'], ref_sample=pairedRef)]
            VARIANTS_somatic += ["SUBJECT/{subject}/{sample}/{reference}.{aligner}/mutect/{sample}_vs_{ref_sample}.mutect.coverage.wig.txt".format(subject=SAMPLE_TO_SUBJECT[pairedS], sample=pairedS, reference=config['reference'], aligner=config['aligner'], ref_sample=pairedRef)]


rule final:
    params: batch='-l nodes=1:gpfs'
    input: 
        BAMS_all \
        + METRICS_all \
        + VARIANTS \
        + FASTQC \
        + VARIANTS_somatic \
        , VARIANTS_freebayesM
        , VARIANTS_unifieldgenotyperM

localrules: final

include: _get_rule_path("rules/resources.rules")
include: _get_rule_path("rules/bwa.rules")
include: _get_rule_path("rules/post_mapping.rules")
include: _get_rule_path("rules/qc.rules")
include: _get_rule_path("rules/variant_germline.rules")
include: _get_rule_path("rules/variant_somatic.rules")
include: _get_rule_path("rules/variant_multisample.rules")
include: _get_rule_path("rules/vcf_processing.rules")
















