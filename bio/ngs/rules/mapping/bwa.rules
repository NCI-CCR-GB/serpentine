"""
Read mapping with BWA MEM (http://bio-bwa.sourceforge.net).

For usage, include this in your workflow.

Required:
  - bwa (0.7.5 or greater)
  - a parameter, bwa_index, that is the bwa index prefix path

Expects the global variable config
(see https://bitbucket.org/johanneskoester/snakemake/wiki/Documentation#markdown-header-configuration)
of at least the following structure, assuming that the desired reference sequence is some genome
to be found under the given path.

The sample/library/unit scheme allows for multiplexing while still tracking
sources of variability.

  - Samples can be run as one or more libraries.
  - Libraries can be single- or paired-end
  - Units are single sets of fastq files (from a lane or multiplexed lane)

{
    "references": {
        "genome": "/path/to/genome.fasta"
    },
    "bwa_index": "/path/to/bwa/index",
    "samples": {
        "A": ["lib_A"],
        "B": ["lib_B1", "lib_B2"]
    },
    "libraries": {
        "lib_A": ["A"],
        "lib_B1": ["unit_b1"],
        "lib_B2": ["unit_b2"]
    },
    "units": {
        "A":
            ["path/to/A_R1.fastq.gz", "path/to/A_R2.fastq.gz"],
        "unit_b1":
            ["path/to/B.fastq.gz"],
        "unit_b2":
            ["path/to/b_1.fastq.gz", "path/to/b_2.fastq.gz"]
    },
    "platform": "Illumina",
    "params_bwa_mem": ""
}

Note the separation between samples and units that allows to have more than
one sequencing run for each sample, or multiple lanes per sample.
The "params_bwa_mem" entry is optional.
"""

import collections


UNIT_TO_LIBRARY = {}
for lib,units in config['libraries'].items():
    for unit in units:
        UNIT_TO_LIBRARY[unit]=lib

LIBRARY_TO_SAMPLE  = {}
for sample,libs in config['samples'].items():
    for lib in libs:
        LIBRARY_TO_SAMPLE[lib]=sample

UNIT_TO_SAMPLE = {}
for unit in config['units'].keys():
    UNIT_TO_SAMPLE[unit]=LIBRARY_TO_SAMPLE[UNIT_TO_LIBRARY[unit]]

SAMPLE_TO_UNIT = collections.defaultdict(list)
for unit,sample in UNIT_TO_SAMPLE.items():
    SAMPLE_TO_UNIT[sample].append(unit)

__author__  = "Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)"
__license__ = "MIT"

from snakemake.exceptions import MissingInputException

rule bwa_index_fasta:
    """Index fasta input for bwa.

    This rule uses config['references'] to get a specific fasta 
    file for indexing. The index is created prior to mapping anything.
    """
    input:
        lambda wildcards: config['references'][wildcards.reference]
    output:
        "resources/mapping/{reference}.pac"
    log: "resources/mapping/{reference}.log"
    params: batch='-l nodes=1:gpfs',
        prefix=lambda wildcards: "resources/mapping/"+wildcards.reference
    shell: "module load bwa/0.7.10 && bwa index -p {params.prefix} {input} 2> {log}"

rule bwa_mem_map:
    """Map individual units with bwa mem

    This rule uses the reference genome, after index creation,
    and maps the reads. Read group info is added automatically
    (LB, SM, PL, and ID).  Output is a coordinate-sorted BAM file.
    The output file is marked as temp().
    """
    input:
        index=lambda wildcards: "resources/mapping/"+wildcards.reference+".pac",
        fastq=lambda wildcards: config["units"][wildcards.unit]
    output:
        temp("mapping/{reference}/units/{unit}.bam")
    version: "0.7.10"
    params:
        batch ="-l nodes=1:gpfs -q ccr",
        sample =lambda wildcards: UNIT_TO_SAMPLE[wildcards.unit],
        library=lambda wildcards: UNIT_TO_LIBRARY[wildcards.unit],
        platform=config.get("platform","Illumina"),
	prefix = "resources/mapping/{reference}",
        custom=config.get("params_bwa_mem", "")
    log: "mapping/log/{reference}/{unit}.log"
    threads: 64
    shell: "module load bwa/{version} && "
        "bwa mem {params.custom} "
        r"-R '@RG\tID:{wildcards.unit}\t"
        r"SM:{params.sample}\tLB:{params.library}\tPL:{params.platform}' "
        "-t {threads} {params.prefix} {input.fastq}  2> {log} "
        "| samtools view -Sbh - > {output}"

rule merge_bwa_sample_bam:
    params:  
        batch="-l nodes=1:gpfs"
    input:
        lambda wildcards: expand("mapping/{reference}/units/{unit}.bam",
                                 unit=SAMPLE_TO_UNIT[wildcards.sample],
                                 reference=wildcards.reference)
    output: 
        temp("mapping/{reference}/samples/{sample}.bam")
    threads: 2
    run:  
        cmd = 'java -jar $PICARDJARPATH/MergeSamFiles.jar AS=true USE_THREADING=true VALIDATION_STRINGENCY=SILENT {0}'.format(' '.join(['I={0}'.format(i) for i in input]))
        cmd = cmd + " O={output}"
        shell(cmd)
